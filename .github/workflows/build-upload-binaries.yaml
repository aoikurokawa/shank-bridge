name: Build and Upload Binaries

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to upload binaries to (e.g. shank-idl-generator-v0.1.0)'
        required: true
        type: string
      package_path:
        description: 'Path to the package'
        required: true
        default: 'shank-idl-generator'
        type: string
      publish_release:
        description: 'Publish the release after uploading binaries'
        required: true
        default: true
        type: boolean

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.create_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: x86_64-unknown-linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            name: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: x86_64-pc-windows-msvc
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update-version.outputs.new_git_tag }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install musl-tools (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "shank-build-${{ matrix.target }}-${{ inputs.package_path }}"
      
      - name: Build
        working-directory: ${{ inputs.package_path }}
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          CRATE_NAME="${{ needs.update-version.outputs.crate_name }}"
          VERSION="${{ needs.update-version.outputs.new_version }}"
          BINARY_NAME="${CRATE_NAME}-v${VERSION}-${{ matrix.target }}"
          
          echo "Building binary with new version: $VERSION"
          
          # Copy binary to root with appropriate name
          cp ./target/${{ matrix.target }}/release/${CRATE_NAME} ${BINARY_NAME}
          
          # Create checksum
          shasum -a 256 ${BINARY_NAME} > ${BINARY_NAME}.sha256
      
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $CRATE_NAME = "${{ needs.update-version.outputs.crate_name }}"
          $VERSION = "${{ needs.update-version.outputs.new_version }}"
          $BINARY_NAME = "${CRATE_NAME}-v${VERSION}-${{ matrix.target }}.exe"
          
          Write-Host "Building binary with new version: $VERSION"
          
          # Copy binary to root with appropriate name
          Copy-Item "./target/${{ matrix.target }}/release/${CRATE_NAME}.exe" -Destination $BINARY_NAME
          
          # Create checksum
          $hash = Get-FileHash -Path $BINARY_NAME -Algorithm SHA256
          $hash.Hash | Out-File -FilePath "${BINARY_NAME}.sha256"
      
      - name: Upload binary artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ needs.update-version.outputs.crate_name }}-v${{ needs.update-version.outputs.new_version }}-${{ matrix.target }}
            ${{ needs.update-version.outputs.crate_name }}-v${{ needs.update-version.outputs.new_version }}-${{ matrix.target }}.sha256
          retention-days: 7
      
      - name: Upload binary artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ needs.update-version.outputs.crate_name }}-v${{ needs.update-version.outputs.new_version }}-${{ matrix.target }}.exe
            ${{ needs.update-version.outputs.crate_name }}-v${{ needs.update-version.outputs.new_version }}-${{ matrix.target }}.exe.sha256
          retention-days: 7

  publish-release:
    name: Publish Release
    needs: build-binaries
    if: github.event.inputs.publish_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit "${{ github.event.inputs.release_tag }}" --draft=false