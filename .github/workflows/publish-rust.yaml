name: Publish Shank IDL Generator Crates

on:
  workflow_dispatch:
    inputs:
      package_path:
        description: Which crate to publish
        required: true
        default: 'shank-idl-generator'
        type: choice
        options:
          - shank-idl-generator
      level:
        description: Version increment level
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: Dry run (no actual publishing)
        required: true
        default: true
        type: boolean
      create_release:
        description: Create a GitHub release
        required: true
        type: boolean
        default: true

jobs:
  # First job - build binaries
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install musl-tools (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "shank-build-${{ matrix.target }}-${{ inputs.package_path }}"
      
      - name: Extract crate name and version
        id: crate_info
        shell: bash
        run: |
          CRATE_NAME=$(basename "${{ inputs.package_path }}")
          VERSION=$(grep -m1 'version =' ${{ inputs.package_path }}/Cargo.toml | cut -d '"' -f2)
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Build
        working-directory: ${{ inputs.package_path }}
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          CRATE_NAME="${{ steps.crate_info.outputs.crate_name }}"
          VERSION="${{ steps.crate_info.outputs.version }}"
          BINARY_NAME="${CRATE_NAME}-v${VERSION}-${{ matrix.target }}"
          
          # Copy binary to root with appropriate name
          cp ${{ inputs.package_path }}/target/${{ matrix.target }}/release/${CRATE_NAME} ${BINARY_NAME}
          
          # Create checksum
          shasum -a 256 ${BINARY_NAME} > ${BINARY_NAME}.sha256
      
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $CRATE_NAME = "${{ steps.crate_info.outputs.crate_name }}"
          $VERSION = "${{ steps.crate_info.outputs.version }}"
          $BINARY_NAME = "${CRATE_NAME}-v${VERSION}-${{ matrix.target }}.exe"
          
          # Copy binary to root with appropriate name
          Copy-Item "${{ inputs.package_path }}/target/${{ matrix.target }}/release/${CRATE_NAME}.exe" -Destination $BINARY_NAME
          
          # Create checksum
          $hash = Get-FileHash -Path $BINARY_NAME -Algorithm SHA256
          $hash.Hash | Out-File -FilePath "${BINARY_NAME}.sha256"
      
      - name: Upload binary artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-binary
          path: |
            ${{ steps.crate_info.outputs.crate_name }}-v${{ steps.crate_info.outputs.version }}-${{ matrix.target }}
            ${{ steps.crate_info.outputs.crate_name }}-v${{ steps.crate_info.outputs.version }}-${{ matrix.target }}.sha256
          retention-days: 7
      
      - name: Upload binary artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-binary
          path: |
            ${{ steps.crate_info.outputs.crate_name }}-v${{ steps.crate_info.outputs.version }}-${{ matrix.target }}.exe
            ${{ steps.crate_info.outputs.crate_name }}-v${{ steps.crate_info.outputs.version }}-${{ matrix.target }}.exe.sha256
          retention-days: 7

  publish:
    name: Publish Crates
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_PAT }}
          fetch-depth: 0 # get the whole history for changelog

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "shank-bridge-publish-${{ inputs.package_path }}"

      - name: Install Cargo Release
        run: cargo install cargo-release

      - name: Set Git Author
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Extract crate name
        id: extract_name
        run: |
          # Extract just the crate name from the path for use in tags and releases
          CRATE_NAME=$(basename "${{ inputs.package_path }}")
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT

      - name: Publish Crate
        id: publish
        working-directory: ${{ inputs.package_path }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Get current version before update
          OLD_VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
          
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            # For dry-run mode, don't use the -x flag (dry-run is default)
            cargo release ${{ inputs.level }} --no-confirm --no-push
          else
            # For actual execution, use the -x flag
            cargo release ${{ inputs.level }} --no-confirm -x
          fi
          
          # Get new version after update
          NEW_VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
          
          # Set outputs for the release step
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "new_git_tag=${{ steps.extract_name.outputs.crate_name }}-v${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Download Linux binary
        if: github.event.inputs.create_release == 'true' && github.event.inputs.dry_run != 'true'
        uses: actions/download-artifact@v4
        with:
          name: linux-musl-binary
          path: release-binaries

      - name: Download macOS binary
        if: github.event.inputs.create_release == 'true' && github.event.inputs.dry_run != 'true'
        uses: actions/download-artifact@v4
        with:
          name: macos-binary
          path: release-binaries

      - name: Download Windows binary
        if: github.event.inputs.create_release == 'true' && github.event.inputs.dry_run != 'true'
        uses: actions/download-artifact@v4
        with:
          name: windows-binary
          path: release-binaries

      - name: Generate a changelog
        if: github.event.inputs.create_release == 'true'
        id: changelog
        uses: metcalfc/changelog-generator@v4.1.0
        with:
          myToken: ${{ secrets.REPO_PAT }}
          includePattern: ".*/${{ inputs.package_path }}/.*"

      - name: Create GitHub release
        if: github.event.inputs.create_release == 'true' && github.event.inputs.dry_run != 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.publish.outputs.new_git_tag }}
          name: "${{ steps.extract_name.outputs.crate_name }} v${{ steps.publish.outputs.new_version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          artifacts: "./release-artifacts/*"